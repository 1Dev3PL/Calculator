{"version":3,"sources":["AppContainer.jsx","App.js","serviceWorker.js","index.js"],"names":["AppContainer","props","onNumButtonClick","e","setState","fullOutput","state","currentTarget","value","numOutput","onOpButtonClick","count","result","eval","toString","clear","slice","clearEvery","this","React","Component","App","className","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7c6908ef.chunk.js","sourcesContent":["import React from 'react';\r\nimport App from \"./App\";\r\n\r\nclass AppContainer extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            fullOutput: '',\r\n            numOutput: ''\r\n        };\r\n    }\r\n\r\n    onNumButtonClick = (e) => {\r\n        this.setState({fullOutput: this.state.fullOutput + e.currentTarget.value, numOutput: this.state.numOutput + e.currentTarget.value})\r\n    };\r\n\r\n    onOpButtonClick = (e) => {\r\n        this.setState({fullOutput: this.state.fullOutput + e.currentTarget.value, numOutput: ''})\r\n    };\r\n\r\n    count = () => {\r\n        let result = eval(this.state.fullOutput).toString();\r\n        if (result === 'Infinity' || result === '-Infinity' || result === 'NaN') {\r\n            this.setState({fullOutput: '', numOutput: 'Error'})\r\n        } else {\r\n            this.setState({fullOutput: result, numOutput: result});\r\n        }\r\n    };\r\n\r\n    clear = () => {\r\n        this.setState({fullOutput: this.state.fullOutput.slice(0, - 1),\r\n            numOutput: this.state.numOutput.slice(0, -1)})\r\n    };\r\n\r\n    clearEvery = () => {\r\n        this.setState({fullOutput: '', numOutput: ''})\r\n    };\r\n\r\n    render() {\r\n        return(\r\n            <App onNumButtonClick={this.onNumButtonClick}\r\n                 onOpButtonClick={this.onOpButtonClick}\r\n                 count={this.count}\r\n                 clear={this.clear}\r\n                 clearEvery={this.clearEvery}\r\n                 fullOutput={this.state.fullOutput}\r\n                 numOutput={this.state.numOutput}/>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AppContainer;","import React from 'react';\nimport './App.css';\n\nlet App = ({onNumButtonClick, onOpButtonClick, count, clear, clearEvery, fullOutput, numOutput}) => {\n    return (\n        <div className='App'>\n            <div className={'calculator'}>\n                <div>\n                    <div className={'outputBlock'}>\n                        <div className={'fullOutput'}>\n                            {fullOutput}\n                        </div>\n                        <div className={'numOutput'}>\n                            {numOutput}\n                        </div>\n                    </div>\n                    <div className={'deleteBlock'}>\n                        <button className={'button'} onClick={clearEvery}>CE</button>\n                        <button className={'button'} onClick={clear}>C</button>\n                    </div>\n                </div>\n                <div className={'inputBlock'}>\n                    <button value={1} className={'button'} onClick={onNumButtonClick}>1</button>\n                    <button value={2} className={'button'} onClick={onNumButtonClick}>2</button>\n                    <button value={3} className={'button'} onClick={onNumButtonClick}>3</button>\n                    <button value={'+'} className={'button'} onClick={onOpButtonClick}>+</button>\n                    <button value={4} className={'button'} onClick={onNumButtonClick}>4</button>\n                    <button value={5} className={'button'} onClick={onNumButtonClick}>5</button>\n                    <button value={6} className={'button'} onClick={onNumButtonClick}>6</button>\n                    <button value={'-'} className={'button'} onClick={onOpButtonClick}>-</button>\n                    <button value={7} className={'button'} onClick={onNumButtonClick}>7</button>\n                    <button value={8} className={'button'} onClick={onNumButtonClick}>8</button>\n                    <button value={9} className={'button'} onClick={onNumButtonClick}>9</button>\n                    <button value={'*'} className={'button'} onClick={onOpButtonClick}>*</button>\n                    <button value={0} className={'button'} onClick={onNumButtonClick}>0</button>\n                    <button value={'.'} className={'button'} onClick={onNumButtonClick}>.</button>\n                    <button value={'='} className={'button'} onClick={count}>=</button>\n                    <button value={'/'} className={'button'} onClick={onOpButtonClick}>/</button>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport AppContainer from './AppContainer';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<AppContainer />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}